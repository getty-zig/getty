//! A (de)serialization framework for the Zig programming language.

const s = @import("ser/ser.zig");
const d = @import("de.zig");

////////////////////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////////////////////

pub const Serializer = @import("ser/interfaces/serializer.zig").Serializer;
pub const Deserializer = @import("de/interfaces/deserializer.zig").Deserializer;

////////////////////////////////////////////////////////////////////////////////
// Namespaces
////////////////////////////////////////////////////////////////////////////////

pub const ser = s.ser;
pub const de = d.de;

/// Compile-time type restraints for Getty data structures.
pub const concepts = struct {
    pub usingnamespace s.concepts;
    pub usingnamespace d.concepts;
};

/// Functions for obtaining type information at compile-time for Getty data
/// structures.
pub const traits = struct {
    pub usingnamespace s.traits;
    pub usingnamespace d.traits;
};

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

/// Serializes a value.
pub const serialize = s.serialize;

/// Deserializes a value.
pub const deserialize = d.deserialize;

////////////////////////////////////////////////////////////////////////////////
// Values
////////////////////////////////////////////////////////////////////////////////

/// Default serialization tuple.
pub const default_st = s.default_st;

/// Default deserialization tuple.
pub const default_dt = d.default_dt;

////////////////////////////////////////////////////////////////////////////////
// Miscellaneous
////////////////////////////////////////////////////////////////////////////////

pub usingnamespace @import("attributes.zig");
